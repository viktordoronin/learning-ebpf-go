// Code generated by bpf2go; DO NOT EDIT.
//go:build mips || mips64 || ppc64 || s390x

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadNetwork returns the embedded CollectionSpec for network.
func loadNetwork() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_NetworkBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load network: %w", err)
	}

	return spec, err
}

// loadNetworkObjects loads network and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*networkObjects
//	*networkPrograms
//	*networkMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadNetworkObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadNetwork()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// networkSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type networkSpecs struct {
	networkProgramSpecs
	networkMapSpecs
	networkVariableSpecs
}

// networkProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type networkProgramSpecs struct {
	Myxdp        *ebpf.ProgramSpec `ebpf:"myxdp"`
	SocketFilter *ebpf.ProgramSpec `ebpf:"socket_filter"`
	TcDrop       *ebpf.ProgramSpec `ebpf:"tc_drop"`
	TcDropPing   *ebpf.ProgramSpec `ebpf:"tc_drop_ping"`
	TcPingpong   *ebpf.ProgramSpec `ebpf:"tc_pingpong"`
	Tcpconnect   *ebpf.ProgramSpec `ebpf:"tcpconnect"`
}

// networkMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type networkMapSpecs struct {
}

// networkVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type networkVariableSpecs struct {
}

// networkObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadNetworkObjects or ebpf.CollectionSpec.LoadAndAssign.
type networkObjects struct {
	networkPrograms
	networkMaps
	networkVariables
}

func (o *networkObjects) Close() error {
	return _NetworkClose(
		&o.networkPrograms,
		&o.networkMaps,
	)
}

// networkMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadNetworkObjects or ebpf.CollectionSpec.LoadAndAssign.
type networkMaps struct {
}

func (m *networkMaps) Close() error {
	return _NetworkClose()
}

// networkVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadNetworkObjects or ebpf.CollectionSpec.LoadAndAssign.
type networkVariables struct {
}

// networkPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadNetworkObjects or ebpf.CollectionSpec.LoadAndAssign.
type networkPrograms struct {
	Myxdp        *ebpf.Program `ebpf:"myxdp"`
	SocketFilter *ebpf.Program `ebpf:"socket_filter"`
	TcDrop       *ebpf.Program `ebpf:"tc_drop"`
	TcDropPing   *ebpf.Program `ebpf:"tc_drop_ping"`
	TcPingpong   *ebpf.Program `ebpf:"tc_pingpong"`
	Tcpconnect   *ebpf.Program `ebpf:"tcpconnect"`
}

func (p *networkPrograms) Close() error {
	return _NetworkClose(
		p.Myxdp,
		p.SocketFilter,
		p.TcDrop,
		p.TcDropPing,
		p.TcPingpong,
		p.Tcpconnect,
	)
}

func _NetworkClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed network_bpfeb.o
var _NetworkBytes []byte
