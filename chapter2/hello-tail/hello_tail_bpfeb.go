// Code generated by bpf2go; DO NOT EDIT.
//go:build mips || mips64 || ppc64 || s390x

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadHello_tail returns the embedded CollectionSpec for hello_tail.
func loadHello_tail() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Hello_tailBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load hello_tail: %w", err)
	}

	return spec, err
}

// loadHello_tailObjects loads hello_tail and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*hello_tailObjects
//	*hello_tailPrograms
//	*hello_tailMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadHello_tailObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadHello_tail()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// hello_tailSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type hello_tailSpecs struct {
	hello_tailProgramSpecs
	hello_tailMapSpecs
	hello_tailVariableSpecs
}

// hello_tailProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type hello_tailProgramSpecs struct {
	Hello        *ebpf.ProgramSpec `ebpf:"hello"`
	HelloExec    *ebpf.ProgramSpec `ebpf:"hello_exec"`
	HelloTimer   *ebpf.ProgramSpec `ebpf:"hello_timer"`
	IgnoreOpcode *ebpf.ProgramSpec `ebpf:"ignore_opcode"`
	PrintSyscall *ebpf.ProgramSpec `ebpf:"print_syscall"`
}

// hello_tailMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type hello_tailMapSpecs struct {
	Syscall *ebpf.MapSpec `ebpf:"syscall"`
}

// hello_tailVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type hello_tailVariableSpecs struct {
}

// hello_tailObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadHello_tailObjects or ebpf.CollectionSpec.LoadAndAssign.
type hello_tailObjects struct {
	hello_tailPrograms
	hello_tailMaps
	hello_tailVariables
}

func (o *hello_tailObjects) Close() error {
	return _Hello_tailClose(
		&o.hello_tailPrograms,
		&o.hello_tailMaps,
	)
}

// hello_tailMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadHello_tailObjects or ebpf.CollectionSpec.LoadAndAssign.
type hello_tailMaps struct {
	Syscall *ebpf.Map `ebpf:"syscall"`
}

func (m *hello_tailMaps) Close() error {
	return _Hello_tailClose(
		m.Syscall,
	)
}

// hello_tailVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadHello_tailObjects or ebpf.CollectionSpec.LoadAndAssign.
type hello_tailVariables struct {
}

// hello_tailPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadHello_tailObjects or ebpf.CollectionSpec.LoadAndAssign.
type hello_tailPrograms struct {
	Hello        *ebpf.Program `ebpf:"hello"`
	HelloExec    *ebpf.Program `ebpf:"hello_exec"`
	HelloTimer   *ebpf.Program `ebpf:"hello_timer"`
	IgnoreOpcode *ebpf.Program `ebpf:"ignore_opcode"`
	PrintSyscall *ebpf.Program `ebpf:"print_syscall"`
}

func (p *hello_tailPrograms) Close() error {
	return _Hello_tailClose(
		p.Hello,
		p.HelloExec,
		p.HelloTimer,
		p.IgnoreOpcode,
		p.PrintSyscall,
	)
}

func _Hello_tailClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed hello_tail_bpfeb.o
var _Hello_tailBytes []byte
