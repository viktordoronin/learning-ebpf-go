// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type hello_verifierMsgT struct{ Message [12]int8 }

// loadHello_verifier returns the embedded CollectionSpec for hello_verifier.
func loadHello_verifier() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Hello_verifierBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load hello_verifier: %w", err)
	}

	return spec, err
}

// loadHello_verifierObjects loads hello_verifier and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*hello_verifierObjects
//	*hello_verifierPrograms
//	*hello_verifierMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadHello_verifierObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadHello_verifier()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// hello_verifierSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type hello_verifierSpecs struct {
	hello_verifierProgramSpecs
	hello_verifierMapSpecs
	hello_verifierVariableSpecs
}

// hello_verifierProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type hello_verifierProgramSpecs struct {
	KprobeExec *ebpf.ProgramSpec `ebpf:"kprobe_exec"`
	XdpHello   *ebpf.ProgramSpec `ebpf:"xdp_hello"`
}

// hello_verifierMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type hello_verifierMapSpecs struct {
	MyConfig *ebpf.MapSpec `ebpf:"my_config"`
	Output   *ebpf.MapSpec `ebpf:"output"`
}

// hello_verifierVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type hello_verifierVariableSpecs struct {
	C       *ebpf.VariableSpec `ebpf:"c"`
	Message *ebpf.VariableSpec `ebpf:"message"`
}

// hello_verifierObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadHello_verifierObjects or ebpf.CollectionSpec.LoadAndAssign.
type hello_verifierObjects struct {
	hello_verifierPrograms
	hello_verifierMaps
	hello_verifierVariables
}

func (o *hello_verifierObjects) Close() error {
	return _Hello_verifierClose(
		&o.hello_verifierPrograms,
		&o.hello_verifierMaps,
	)
}

// hello_verifierMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadHello_verifierObjects or ebpf.CollectionSpec.LoadAndAssign.
type hello_verifierMaps struct {
	MyConfig *ebpf.Map `ebpf:"my_config"`
	Output   *ebpf.Map `ebpf:"output"`
}

func (m *hello_verifierMaps) Close() error {
	return _Hello_verifierClose(
		m.MyConfig,
		m.Output,
	)
}

// hello_verifierVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadHello_verifierObjects or ebpf.CollectionSpec.LoadAndAssign.
type hello_verifierVariables struct {
	C       *ebpf.Variable `ebpf:"c"`
	Message *ebpf.Variable `ebpf:"message"`
}

// hello_verifierPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadHello_verifierObjects or ebpf.CollectionSpec.LoadAndAssign.
type hello_verifierPrograms struct {
	KprobeExec *ebpf.Program `ebpf:"kprobe_exec"`
	XdpHello   *ebpf.Program `ebpf:"xdp_hello"`
}

func (p *hello_verifierPrograms) Close() error {
	return _Hello_verifierClose(
		p.KprobeExec,
		p.XdpHello,
	)
}

func _Hello_verifierClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed hello_verifier_x86_bpfel.o
var _Hello_verifierBytes []byte
