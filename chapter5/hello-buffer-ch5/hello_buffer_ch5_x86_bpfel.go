// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type hello_buffer_ch5UserMsgT struct{ Message [12]int8 }

// loadHello_buffer_ch5 returns the embedded CollectionSpec for hello_buffer_ch5.
func loadHello_buffer_ch5() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Hello_buffer_ch5Bytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load hello_buffer_ch5: %w", err)
	}

	return spec, err
}

// loadHello_buffer_ch5Objects loads hello_buffer_ch5 and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*hello_buffer_ch5Objects
//	*hello_buffer_ch5Programs
//	*hello_buffer_ch5Maps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadHello_buffer_ch5Objects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadHello_buffer_ch5()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// hello_buffer_ch5Specs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type hello_buffer_ch5Specs struct {
	hello_buffer_ch5ProgramSpecs
	hello_buffer_ch5MapSpecs
	hello_buffer_ch5VariableSpecs
}

// hello_buffer_ch5ProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type hello_buffer_ch5ProgramSpecs struct {
	Hello *ebpf.ProgramSpec `ebpf:"hello"`
}

// hello_buffer_ch5MapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type hello_buffer_ch5MapSpecs struct {
	MyConfig *ebpf.MapSpec `ebpf:"my_config"`
	Output   *ebpf.MapSpec `ebpf:"output"`
}

// hello_buffer_ch5VariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type hello_buffer_ch5VariableSpecs struct {
	Message *ebpf.VariableSpec `ebpf:"message"`
}

// hello_buffer_ch5Objects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadHello_buffer_ch5Objects or ebpf.CollectionSpec.LoadAndAssign.
type hello_buffer_ch5Objects struct {
	hello_buffer_ch5Programs
	hello_buffer_ch5Maps
	hello_buffer_ch5Variables
}

func (o *hello_buffer_ch5Objects) Close() error {
	return _Hello_buffer_ch5Close(
		&o.hello_buffer_ch5Programs,
		&o.hello_buffer_ch5Maps,
	)
}

// hello_buffer_ch5Maps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadHello_buffer_ch5Objects or ebpf.CollectionSpec.LoadAndAssign.
type hello_buffer_ch5Maps struct {
	MyConfig *ebpf.Map `ebpf:"my_config"`
	Output   *ebpf.Map `ebpf:"output"`
}

func (m *hello_buffer_ch5Maps) Close() error {
	return _Hello_buffer_ch5Close(
		m.MyConfig,
		m.Output,
	)
}

// hello_buffer_ch5Variables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadHello_buffer_ch5Objects or ebpf.CollectionSpec.LoadAndAssign.
type hello_buffer_ch5Variables struct {
	Message *ebpf.Variable `ebpf:"message"`
}

// hello_buffer_ch5Programs contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadHello_buffer_ch5Objects or ebpf.CollectionSpec.LoadAndAssign.
type hello_buffer_ch5Programs struct {
	Hello *ebpf.Program `ebpf:"hello"`
}

func (p *hello_buffer_ch5Programs) Close() error {
	return _Hello_buffer_ch5Close(
		p.Hello,
	)
}

func _Hello_buffer_ch5Close(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed hello_buffer_ch5_x86_bpfel.o
var _Hello_buffer_ch5Bytes []byte
