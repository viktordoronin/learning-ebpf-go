// Code generated by bpf2go; DO NOT EDIT.
//go:build mips || mips64 || ppc64 || s390x

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type ring_configUserMsgT struct{ Message [12]int8 }

// loadRing_config returns the embedded CollectionSpec for ring_config.
func loadRing_config() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Ring_configBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load ring_config: %w", err)
	}

	return spec, err
}

// loadRing_configObjects loads ring_config and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*ring_configObjects
//	*ring_configPrograms
//	*ring_configMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadRing_configObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadRing_config()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// ring_configSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ring_configSpecs struct {
	ring_configProgramSpecs
	ring_configMapSpecs
	ring_configVariableSpecs
}

// ring_configProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ring_configProgramSpecs struct {
	Hello *ebpf.ProgramSpec `ebpf:"hello"`
}

// ring_configMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ring_configMapSpecs struct {
	Config *ebpf.MapSpec `ebpf:"config"`
	Output *ebpf.MapSpec `ebpf:"output"`
}

// ring_configVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ring_configVariableSpecs struct {
}

// ring_configObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadRing_configObjects or ebpf.CollectionSpec.LoadAndAssign.
type ring_configObjects struct {
	ring_configPrograms
	ring_configMaps
	ring_configVariables
}

func (o *ring_configObjects) Close() error {
	return _Ring_configClose(
		&o.ring_configPrograms,
		&o.ring_configMaps,
	)
}

// ring_configMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadRing_configObjects or ebpf.CollectionSpec.LoadAndAssign.
type ring_configMaps struct {
	Config *ebpf.Map `ebpf:"config"`
	Output *ebpf.Map `ebpf:"output"`
}

func (m *ring_configMaps) Close() error {
	return _Ring_configClose(
		m.Config,
		m.Output,
	)
}

// ring_configVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadRing_configObjects or ebpf.CollectionSpec.LoadAndAssign.
type ring_configVariables struct {
}

// ring_configPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadRing_configObjects or ebpf.CollectionSpec.LoadAndAssign.
type ring_configPrograms struct {
	Hello *ebpf.Program `ebpf:"hello"`
}

func (p *ring_configPrograms) Close() error {
	return _Ring_configClose(
		p.Hello,
	)
}

func _Ring_configClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed ring_config_bpfeb.o
var _Ring_configBytes []byte
