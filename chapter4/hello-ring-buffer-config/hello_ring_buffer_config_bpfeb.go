// Code generated by bpf2go; DO NOT EDIT.
//go:build mips || mips64 || ppc64 || s390x

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type hello_ring_buffer_configDataT struct {
	Pid     int32
	Uid     int32
	Command [16]int8
	Message [12]int8
}

type hello_ring_buffer_configUserMsgT struct{ Message [12]int8 }

// loadHello_ring_buffer_config returns the embedded CollectionSpec for hello_ring_buffer_config.
func loadHello_ring_buffer_config() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Hello_ring_buffer_configBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load hello_ring_buffer_config: %w", err)
	}

	return spec, err
}

// loadHello_ring_buffer_configObjects loads hello_ring_buffer_config and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*hello_ring_buffer_configObjects
//	*hello_ring_buffer_configPrograms
//	*hello_ring_buffer_configMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadHello_ring_buffer_configObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadHello_ring_buffer_config()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// hello_ring_buffer_configSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type hello_ring_buffer_configSpecs struct {
	hello_ring_buffer_configProgramSpecs
	hello_ring_buffer_configMapSpecs
	hello_ring_buffer_configVariableSpecs
}

// hello_ring_buffer_configProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type hello_ring_buffer_configProgramSpecs struct {
	Hello *ebpf.ProgramSpec `ebpf:"hello"`
}

// hello_ring_buffer_configMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type hello_ring_buffer_configMapSpecs struct {
	Config *ebpf.MapSpec `ebpf:"config"`
	Output *ebpf.MapSpec `ebpf:"output"`
}

// hello_ring_buffer_configVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type hello_ring_buffer_configVariableSpecs struct {
}

// hello_ring_buffer_configObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadHello_ring_buffer_configObjects or ebpf.CollectionSpec.LoadAndAssign.
type hello_ring_buffer_configObjects struct {
	hello_ring_buffer_configPrograms
	hello_ring_buffer_configMaps
	hello_ring_buffer_configVariables
}

func (o *hello_ring_buffer_configObjects) Close() error {
	return _Hello_ring_buffer_configClose(
		&o.hello_ring_buffer_configPrograms,
		&o.hello_ring_buffer_configMaps,
	)
}

// hello_ring_buffer_configMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadHello_ring_buffer_configObjects or ebpf.CollectionSpec.LoadAndAssign.
type hello_ring_buffer_configMaps struct {
	Config *ebpf.Map `ebpf:"config"`
	Output *ebpf.Map `ebpf:"output"`
}

func (m *hello_ring_buffer_configMaps) Close() error {
	return _Hello_ring_buffer_configClose(
		m.Config,
		m.Output,
	)
}

// hello_ring_buffer_configVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadHello_ring_buffer_configObjects or ebpf.CollectionSpec.LoadAndAssign.
type hello_ring_buffer_configVariables struct {
}

// hello_ring_buffer_configPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadHello_ring_buffer_configObjects or ebpf.CollectionSpec.LoadAndAssign.
type hello_ring_buffer_configPrograms struct {
	Hello *ebpf.Program `ebpf:"hello"`
}

func (p *hello_ring_buffer_configPrograms) Close() error {
	return _Hello_ring_buffer_configClose(
		p.Hello,
	)
}

func _Hello_ring_buffer_configClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed hello_ring_buffer_config_bpfeb.o
var _Hello_ring_buffer_configBytes []byte
