// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type hello_configUserMsgT struct{ Message [13]int8 }

// loadHello_config returns the embedded CollectionSpec for hello_config.
func loadHello_config() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Hello_configBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load hello_config: %w", err)
	}

	return spec, err
}

// loadHello_configObjects loads hello_config and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*hello_configObjects
//	*hello_configPrograms
//	*hello_configMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadHello_configObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadHello_config()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// hello_configSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type hello_configSpecs struct {
	hello_configProgramSpecs
	hello_configMapSpecs
	hello_configVariableSpecs
}

// hello_configProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type hello_configProgramSpecs struct {
	Hello *ebpf.ProgramSpec `ebpf:"hello"`
}

// hello_configMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type hello_configMapSpecs struct {
	Config *ebpf.MapSpec `ebpf:"config"`
	Output *ebpf.MapSpec `ebpf:"output"`
}

// hello_configVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type hello_configVariableSpecs struct {
}

// hello_configObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadHello_configObjects or ebpf.CollectionSpec.LoadAndAssign.
type hello_configObjects struct {
	hello_configPrograms
	hello_configMaps
	hello_configVariables
}

func (o *hello_configObjects) Close() error {
	return _Hello_configClose(
		&o.hello_configPrograms,
		&o.hello_configMaps,
	)
}

// hello_configMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadHello_configObjects or ebpf.CollectionSpec.LoadAndAssign.
type hello_configMaps struct {
	Config *ebpf.Map `ebpf:"config"`
	Output *ebpf.Map `ebpf:"output"`
}

func (m *hello_configMaps) Close() error {
	return _Hello_configClose(
		m.Config,
		m.Output,
	)
}

// hello_configVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadHello_configObjects or ebpf.CollectionSpec.LoadAndAssign.
type hello_configVariables struct {
}

// hello_configPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadHello_configObjects or ebpf.CollectionSpec.LoadAndAssign.
type hello_configPrograms struct {
	Hello *ebpf.Program `ebpf:"hello"`
}

func (p *hello_configPrograms) Close() error {
	return _Hello_configClose(
		p.Hello,
	)
}

func _Hello_configClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed hello_config_bpfel.o
var _Hello_configBytes []byte
