// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type helloMsgT struct{ Message [12]int8 }

// loadHello returns the embedded CollectionSpec for hello.
func loadHello() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_HelloBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load hello: %w", err)
	}

	return spec, err
}

// loadHelloObjects loads hello and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*helloObjects
//	*helloPrograms
//	*helloMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadHelloObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadHello()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// helloSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type helloSpecs struct {
	helloProgramSpecs
	helloMapSpecs
	helloVariableSpecs
}

// helloProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type helloProgramSpecs struct {
	KprobeDoExecve   *ebpf.ProgramSpec `ebpf:"kprobe_do_execve"`
	KprobeSysExecve  *ebpf.ProgramSpec `ebpf:"kprobe_sys_execve"`
	RawTpExec        *ebpf.ProgramSpec `ebpf:"raw_tp_exec"`
	TpBtfExec        *ebpf.ProgramSpec `ebpf:"tp_btf_exec"`
	TpSysEnterExecve *ebpf.ProgramSpec `ebpf:"tp_sys_enter_execve"`
}

// helloMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type helloMapSpecs struct {
	MyConfig *ebpf.MapSpec `ebpf:"my_config"`
	Output   *ebpf.MapSpec `ebpf:"output"`
}

// helloVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type helloVariableSpecs struct {
	FentryMsg    *ebpf.VariableSpec `ebpf:"fentry_msg"`
	KprobeMsg    *ebpf.VariableSpec `ebpf:"kprobe_msg"`
	KprobeSysMsg *ebpf.VariableSpec `ebpf:"kprobe_sys_msg"`
	RawTpExecMsg *ebpf.VariableSpec `ebpf:"raw_tp_exec_msg"`
	TpBtfExecMsg *ebpf.VariableSpec `ebpf:"tp_btf_exec_msg"`
	TpMsg        *ebpf.VariableSpec `ebpf:"tp_msg"`
}

// helloObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadHelloObjects or ebpf.CollectionSpec.LoadAndAssign.
type helloObjects struct {
	helloPrograms
	helloMaps
	helloVariables
}

func (o *helloObjects) Close() error {
	return _HelloClose(
		&o.helloPrograms,
		&o.helloMaps,
	)
}

// helloMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadHelloObjects or ebpf.CollectionSpec.LoadAndAssign.
type helloMaps struct {
	MyConfig *ebpf.Map `ebpf:"my_config"`
	Output   *ebpf.Map `ebpf:"output"`
}

func (m *helloMaps) Close() error {
	return _HelloClose(
		m.MyConfig,
		m.Output,
	)
}

// helloVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadHelloObjects or ebpf.CollectionSpec.LoadAndAssign.
type helloVariables struct {
	FentryMsg    *ebpf.Variable `ebpf:"fentry_msg"`
	KprobeMsg    *ebpf.Variable `ebpf:"kprobe_msg"`
	KprobeSysMsg *ebpf.Variable `ebpf:"kprobe_sys_msg"`
	RawTpExecMsg *ebpf.Variable `ebpf:"raw_tp_exec_msg"`
	TpBtfExecMsg *ebpf.Variable `ebpf:"tp_btf_exec_msg"`
	TpMsg        *ebpf.Variable `ebpf:"tp_msg"`
}

// helloPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadHelloObjects or ebpf.CollectionSpec.LoadAndAssign.
type helloPrograms struct {
	KprobeDoExecve   *ebpf.Program `ebpf:"kprobe_do_execve"`
	KprobeSysExecve  *ebpf.Program `ebpf:"kprobe_sys_execve"`
	RawTpExec        *ebpf.Program `ebpf:"raw_tp_exec"`
	TpBtfExec        *ebpf.Program `ebpf:"tp_btf_exec"`
	TpSysEnterExecve *ebpf.Program `ebpf:"tp_sys_enter_execve"`
}

func (p *helloPrograms) Close() error {
	return _HelloClose(
		p.KprobeDoExecve,
		p.KprobeSysExecve,
		p.RawTpExec,
		p.TpBtfExec,
		p.TpSysEnterExecve,
	)
}

func _HelloClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed hello_x86_bpfel.o
var _HelloBytes []byte
